#ifndef BOARD_H
#define BOARD_H

#include <QWidget>
#include <QVector>
#include "msg.h"

enum player_status{
    no_right_to_move,
    hasnt_decided_yet,
    has_decided
};

class Board : public QWidget
{
    Q_OBJECT
public:
    Board(QWidget *parent = nullptr);
    ~Board();
    int lattice_status[121] = {};
    constexpr static int lattice[121][9] = {{0,62,50,-1,-1,2,1,-1,-1},{1,61,51,0,2,4,3,-1,-1},{2,63,51,-1,-1,5,4,1,0},{3,60,52,1,4,7,6,-1,-1},{4,62,52,2,5,8,7,3,1},{5,64,52,-1,-1,9,8,4,2},{6,59,53,3,7,15,14,-1,-1},{7,61,53,4,8,16,15,6,3},{8,63,53,5,9,17,16,7,4},{9,65,53,-1,-1,18,17,8,5},{10,50,54,-1,11,23,-1,-1,-1},{11,52,54,-1,12,24,23,10,-1},{12,54,54,-1,13,25,24,11,-1},{13,56,54,-1,14,26,25,12,-1},{14,58,54,6,15,27,26,13,-1},{15,60,54,7,16,28,27,14,6},{16,62,54,8,17,29,28,15,7},{17,64,54,9,18,30,29,16,8},{18,66,54,-1,19,31,30,17,9},{19,68,54,-1,20,32,31,18,-1},{20,70,54,-1,21,33,32,19,-1},{21,72,54,-1,22,34,33,20,-1},{22,74,54,-1,-1,-1,34,21,-1},{23,51,55,11,24,35,-1,-1,10},{24,53,55,12,25,36,35,23,11},{25,55,55,13,26,37,36,24,12},{26,57,55,14,27,38,37,25,13},{27,59,55,15,28,39,38,26,14},{28,61,55,16,29,40,39,27,15},{29,63,55,17,30,41,40,28,16},{30,65,55,18,31,42,41,29,17},{31,67,55,19,32,43,42,30,18},{32,69,55,20,33,44,43,31,19},{33,71,55,21,34,45,44,32,20},{34,73,55,22,-1,-1,45,33,21},{35,52,56,24,36,46,-1,-1,23},{36,54,56,25,37,47,46,35,24},{37,56,56,26,38,48,47,36,25},{38,58,56,27,39,49,48,37,26},{39,60,56,28,40,50,49,38,27},{40,62,56,29,41,51,50,39,28},{41,64,56,30,42,52,51,40,29},{42,66,56,31,43,53,52,41,30},{43,68,56,32,44,54,53,42,31},{44,70,56,33,45,55,54,43,32},{45,72,56,34,-1,-1,55,44,33},{46,53,57,36,47,56,-1,-1,35},{47,55,57,37,48,57,56,46,36},{48,57,57,38,49,58,57,47,37},{49,59,57,39,50,59,58,48,38},{50,61,57,40,51,60,59,49,39},{51,63,57,41,52,61,60,50,40},{52,65,57,42,53,62,61,51,41},{53,67,57,43,54,63,62,52,42},{54,69,57,44,55,64,63,53,43},{55,71,57,45,-1,-1,64,54,44},{56,54,58,47,57,66,65,-1,46},{57,56,58,48,58,67,66,56,47},{58,58,58,49,59,68,67,57,48},{59,60,58,50,60,69,68,58,49},{60,62,58,51,61,70,69,59,50},{61,64,58,52,62,71,70,60,51},{62,66,58,53,63,72,71,61,52},{63,68,58,54,64,73,72,62,53},{64,70,58,55,-1,74,73,63,54},{65,53,59,56,66,76,75,-1,-1},{66,55,59,57,67,77,76,65,56},{67,57,59,58,68,78,77,66,57},{68,59,59,59,69,79,78,67,58},{69,61,59,60,70,80,79,68,59},{70,63,59,61,71,81,80,69,60},{71,65,59,62,72,82,81,70,61},{72,67,59,63,73,83,82,71,62},{73,69,59,64,74,84,83,72,63},{74,71,59,-1,-1,85,84,73,64},{75,52,60,65,76,87,86,-1,-1},{76,54,60,66,77,88,87,75,65},{77,56,60,67,78,89,88,76,66},{78,58,60,68,79,90,89,77,67},{79,60,60,69,80,91,90,78,68},{80,62,60,70,81,92,91,79,69},{81,64,60,71,82,93,92,80,70},{82,66,60,72,83,94,93,81,71},{83,68,60,73,84,95,94,82,72},{84,70,60,74,85,96,95,83,73},{85,72,60,-1,-1,97,96,84,74},{86,51,61,75,87,99,98,-1,-1},{87,53,61,76,88,100,99,86,75},{88,55,61,77,89,101,100,87,76},{89,57,61,78,90,102,101,88,77},{90,59,61,79,91,103,102,89,78},{91,61,61,80,92,104,103,90,79},{92,63,61,81,93,105,104,91,80},{93,65,61,82,94,106,105,92,81},{94,67,61,83,95,107,106,93,82},{95,69,61,84,96,108,107,94,83},{96,71,61,85,97,109,108,95,84},{97,73,61,-1,-1,110,109,96,85},{98,50,62,86,99,-1,-1,-1,-1},{99,52,62,87,100,-1,-1,98,86},{100,54,62,88,101,-1,-1,99,87},{101,56,62,89,102,-1,-1,100,88},{102,58,62,90,103,111,-1,101,89},{103,60,62,91,104,112,111,102,90},{104,62,62,92,105,113,112,103,91},{105,64,62,93,106,114,113,104,92},{106,66,62,94,107,-1,114,105,93},{107,68,62,95,108,-1,-1,106,94},{108,70,62,96,109,-1,-1,107,95},{109,72,62,97,110,-1,-1,108,96},{110,74,62,-1,-1,-1,-1,109,97},{111,59,63,103,112,115,-1,-1,102},{112,61,63,104,113,116,115,111,103},{113,63,63,105,114,117,116,112,104},{114,65,63,106,-1,-1,117,113,105},{115,60,64,112,116,118,-1,-1,111},{116,62,64,113,117,119,118,115,112},{117,64,64,114,-1,-1,119,116,113},{118,61,65,116,119,120,-1,-1,115},{119,63,65,117,-1,-1,120,118,116},{120,62,66,119,-1,-1,-1,-1,118}};
    void collect_info(Msg&);
    bool paint_or_not = false;


signals:
    void click_chess(int);
    void illegal_click();
    void successfully_moved(int a,int b);

protected:
    void set_lattice_status(QVector<int>&,QVector<int>&);
    QVector<int> get_leagal_jumps(int chess, int id);//id = 1 red; id = 2 green
    virtual void mousePressEvent(QMouseEvent *event);


private:
    double gridH; //downwards 1 gridH and rightwards 1 gridW gets next
    double gridW;
    int current_selected = -1;
    int current_id = 1;
    player_status current_status = no_right_to_move;
    int get_clicked_at(int x, int y);
    QVector<int> golden_points;
    int last_from = -1;
    int last_to = -1;

public slots:
    void paintEvent(QPaintEvent * event);
    void handle_click(int);
    void move_permitted(){
        current_selected = -1;
        current_status = hasnt_decided_yet;
    }
    void move_banned(){
        current_selected = -1;
        current_status = no_right_to_move;
    }
    void set_id(int a){// 1 moves first, 2 moves after
        current_id = a;
    }
    void set_last_move(int from, int to){
        last_from = from;
        last_to = to;
        repaint();
    }
    void unset_last_move(){
        last_from = -1;
        last_to = -1;
        repaint();
    }
    void set_lattice(const int* a){
        for(int i = 0; i < 121;i++){
            if(a[i] == 0 || a[i] == 1 || a[i] == 2)lattice_status[i] = a[i];
        }
    }





};

#endif // BOARD_H
